// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/booking_db?schema=public"
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  reviews   Review[] // Зв'язок із відгуками вже був реалізований
}

model CatalogItem {
  id          String       @id @default(uuid())
  title       String
  description String?
  price       Decimal      @db.Decimal(10, 2)
  imageUrl    String?
  isAvailable Boolean      @default(true)
  category    CarCategory? // Змінено з String? на перечислення CarCategory
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  bookings    Booking[]
  rates       Rate[]
  reviews     Review[] // Додано зв'язок із відгуками
}

model Booking {
  id            String        @id @default(uuid())
  startDate     DateTime
  endDate       DateTime
  status        BookingStatus @default(PENDING)
  totalPrice    Decimal       @db.Decimal(10, 2)
  notes         String?
  hasReview     Boolean       @default(false) // Додано поле для відстеження відгуків
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  catalogItemId String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  catalogItem   CatalogItem   @relation(fields: [catalogItemId], references: [id], onDelete: Cascade)
}

model Rate {
  id            String      @id @default(uuid())
  name          String
  description   String?
  price         Decimal     @db.Decimal(10, 2)
  validFrom     DateTime?
  validTo       DateTime?
  conditions    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  catalogItemId String
  catalogItem   CatalogItem @relation(fields: [catalogItemId], references: [id], onDelete: Cascade)
}

model Review {
  id            String       @id @default(uuid())
  rating        Int          @db.SmallInt
  comment       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  catalogItemId String? // Додано поле для зв'язку з автомобілем
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  catalogItem   CatalogItem? @relation(fields: [catalogItemId], references: [id], onDelete: SetNull)
}

model Contact {
  id        String      @id @default(uuid())
  type      ContactType
  value     String
  isMain    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ContactType {
  EMAIL
  PHONE
  ADDRESS
  WEBSITE
  SOCIAL
}

// Додано перелік для категорій автомобілів
enum CarCategory {
  ECONOMY
  COMFORT
  BUSINESS
  ELITE
}
